class Post
  @callbacks = new Callbacks 'Post'
  toString: -> @ID

  constructor: (root, @thread, @board, that={}) ->
    @ID     = +root.id[2..]
    @fullID = "#{@board}.#{@ID}"

    @cleanup root, post if that.isOriginalMarkup
    post = $ '.post',     root
    info = $ '.postInfo', post
    root.dataset.fullID = @fullID
    @nodes =
      root: root
      post: post
      info: info
      nameBlock: $ '.nameBlock', info
      quote: $ '.postNum > a:nth-of-type(2)', info
      comment: $ '.postMessage', post
      links: []
      quotelinks: []
      backlinks: info.getElementsByClassName 'backlink'

    unless @isReply = $.hasClass post, 'reply'
      @thread.OP = @
      @thread.isArchived = !!$ '.archivedIcon', info
      @thread.isSticky   = !!$ '.stickyIcon', info
      @thread.isClosed   = @thread.isArchived or !!$ '.closedIcon', info
      @thread.kill() if @thread.isArchived

    @info = {}
    @info.nameBlock = if Conf['Anonymize']
      'Anonymous'
    else
      @nodes.nameBlock.textContent.trim()
    if subject        = $ '.subject',            info
      @nodes.subject  = subject
      @info.subject   = subject.textContent
    if name           = $ '.name',               info
      @nodes.name     = name
      @info.name      = name.textContent
    if email          = $ '.useremail',          info
      @nodes.email    = email
      @info.email     = decodeURIComponent email.href[7..]
    if tripcode       = $ '.postertrip',         info
      @nodes.tripcode = tripcode
      @info.tripcode  = tripcode.textContent
    if uniqueID       = $ '.posteruid',          info
      @nodes.uniqueID = uniqueID
      @info.uniqueID  = uniqueID.firstElementChild.textContent
    if capcode        = $ '.capcode.hand',       info
      @nodes.capcode  = capcode
      @info.capcode   = capcode.textContent.replace '## ', ''
    if flag           = $ '.flag, .countryFlag', info
      @nodes.flag     = flag
      @info.flag      = flag.title
    if date           = $ '.dateTime',           info
      @nodes.date     = date
      @info.date      = new Date date.dataset.utc * 1000

    @parseComment()
    @parseQuotes()
    @parseFile that

    @labels     = []
    @highlights = []
    @isDead   = false
    @isHidden = false

    @clones = []
    g.posts.push @fullID, thread.posts.push @, board.posts.push @, @
    @kill() if that.isArchived

  parseComment: ->
    # Merge text nodes and remove empty ones.
    @nodes.comment.normalize()

    # Get the comment's text.
    # <br> -> \n
    # Remove:
    #   'Comment too long'...
    #   EXIF data. (/p/)
    #   Rolls. (/tg/)
    #   Marquees. (/pol/)
    #   Preceding and following new lines.
    #   Trailing spaces.
    bq = @nodes.comment.cloneNode true
    nodes = $$ '.abbr, .exif, b, marquee', bq
    i = 0
    $.rm node while node = nodes[i++]
    @info.comment = @nodesToText bq

    # Get the comment's text with spoilers hidden.
    spoilers = $$ 's', bq
    @info.commentSpoilered = if spoilers.length
      for node in spoilers
        $.replace node, $.tn '[spoiler]'
      @nodesToText bq
    else
      @info.comment

  nodesToText: (bq) ->
    text = ""
    nodes = $.X './/br|.//text()', bq
    i = 0
    while node = nodes.snapshotItem i++
      text += node.data or '\n'
    text.trim().replace /\s+$/gm, ''

  parseQuotes: ->
    @quotes = []
    # XXX https://github.com/4chan/4chan-JS/issues/77
    # 4chan currently creates quote links inside [code] tags; ignore them
    for quotelink in $$ ':not(pre) > .quotelink', @nodes.comment
      @parseQuote quotelink
    return

  parseQuote: (quotelink) ->
    # Only add quotes that link to posts on an imageboard.
    # Don't add:
    #  - board links. (>>>/b/)
    #  - catalog links. (>>>/b/catalog or >>>/b/search)
    #  - rules links. (>>>/a/rules)
    #  - text-board quotelinks. (>>>/img/1234)
    return unless match = quotelink.href.match ///
      boards\.4chan\.org/
      ([^/]+) # boardID
      /(?:res|thread)/\d+(?:\/[^#]*)?#p
      (\d+)   # postID
      $
    ///

    @nodes.quotelinks.push quotelink

    return if @isClone

    # ES6 Set when?
    fullID = "#{match[1]}.#{match[2]}"
    @quotes.push fullID unless fullID in @quotes

  parseFile: (that) ->
    return unless (fileEl = $ '.file', @nodes.post) and thumb = $ 'img[data-md5]', fileEl
    # Supports JPG/PNG/GIF/PDF.
    # Flash files are not supported.
    anchor   = thumb.parentNode
    fileText = fileEl.firstElementChild
    @file    =
      text:  fileText
      thumb: thumb
      URL:   anchor.href
      size:  thumb.alt.match(/[\d.]+\s\w+/)[0]
      MD5:   thumb.dataset.md5
      isSpoiler: $.hasClass anchor, 'imgspoiler'
    size  = +@file.size.match(/[\d.]+/)[0]
    unit  = ['B', 'KB', 'MB', 'GB'].indexOf @file.size.match(/\w+$/)[0]
    size *= 1024 while unit-- > 0
    @file.sizeInBytes = size
    @file.thumbURL = "#{location.protocol}//i.4cdn.org/#{@board}/#{@file.URL.match(/(\d+)\./)[1]}s.jpg"
    @file.isImage = /(jpg|png|gif)$/i.test @file.URL
    @file.isVideo = /webm$/i.test @file.URL
    nameNode = $ 'a', fileText
    if @file.isImage or @file.isVideo
      @file.dimensions = nameNode.nextSibling.textContent.match(/\d+x\d+/)[0]
    @file.name = fileText.title or nameNode.title or nameNode.textContent

  cleanup: (root) ->
    for node in $$ '.mobile', root
      $.rm node
    for node in $$ '.desktop', root
      $.rmClass node, 'desktop'
    return

  getNameBlock: ->
    if Conf['Anonymize']
      'Anonymous'
    else
      $('.nameBlock', @nodes.info).textContent.trim()

  hide: (label, makeStub=Conf['Stubs'], hideRecursively=Conf['Recursive Hiding']) ->
    @labels.push label unless label in @labels
    return if @isHidden
    @isHidden = true

    for quotelink in Get.allQuotelinksLinkingTo @
      $.addClass quotelink, 'filtered'

    if hideRecursively
      label = "Recursively hidden for quoting No.#{@}"
      Recursive.apply 'hide', @, label, makeStub, true
      Recursive.add   'hide', @, label, makeStub, true

    PostHiding.saveHiddenState @, {thisPost: true, hideRecursively: hideRecursively, makeStub: makeStub}

    if !@isReply
      @thread.hide()
      return

    unless makeStub
      @nodes.root.hidden = true
      return

    @nodes.post.hidden = true
    @nodes.post.previousElementSibling.hidden = true
    @nodes.stub = $.el 'div',
      className: 'stub'
    $.add @nodes.stub, [
      PostHiding.makeButton false
      $.tn " #{@getNameBlock()}"
    ]
    $.add @nodes.stub, Menu.makeButton @ if Conf['Menu']
    $.prepend @nodes.root, @nodes.stub

  show: (showRecursively=Conf['Recursive Hiding']) ->
    return if !@isHidden
    @isHidden = false

    for quotelink in Get.allQuotelinksLinkingTo @
      $.rmClass quotelink, 'filtered'

    if showRecursively
      Recursive.apply 'show', @, true
      Recursive.rm    'hide', @

    PostHiding.saveHiddenState @, {thisPost: true, hideRecursively: showRecursively, makeStub: !!@nodes.stub}

    if !@isReply
      @thread.show()
      return

    unless @nodes.stub
      @nodes.root.hidden = false
      return

    @nodes.post.hidden = false
    @nodes.post.previousElementSibling.hidden = false
    $.rm @nodes.stub
    delete @nodes.stub

  highlight: (label, highlight, top) ->
    @labels.push label
    unless highlight in @highlights
      @highlights.push highlight
      $.addClass @nodes.root, highlight
    if !@isReply and top
      @thread.isOnTop = true

  kill: (file) ->
    if file
      return if @file.isDead
      @file.isDead = true
      $.addClass @nodes.root, 'deleted-file'
    else
      return if @isDead
      @isDead = true
      $.addClass @nodes.root, 'deleted-post'

    unless strong = $ 'strong.warning', @nodes.info
      strong = $.el 'strong',
          className: 'warning fa'
      $.after $('input', @nodes.info), strong
    strong.textContent = if file then '\uf070' else '\uf014'
    strong.title = "#{if file then 'File' else 'Post'} Deleted"

    return if @isClone
    for clone in @clones
      clone.kill file

    return if file
    # Get quotelinks/backlinks to this post
    # and paint them (Dead).
    for quotelink in Get.allQuotelinksLinkingTo @ when not $.hasClass quotelink, 'deadlink'
      $.addClass quotelink, 'deadlink'
      QuoteMarkers.parseQuotelink Get.postFromNode(quotelink), quotelink, true
    return
  # XXX tmp fix for 4chan's racing condition
  # giving us false-positive dead posts.
  resurrect: ->
    delete @isDead
    $.rmClass @nodes.root, 'deleted-post'
    strong = $ 'strong.warning', @nodes.info
    # no false-positive files
    if @file and @file.isDead
      strong.textContent = '[File deleted]'
    else
      $.rm strong

    return if @isClone
    for clone in @clones
      clone.resurrect()

    for quotelink in Get.allQuotelinksLinkingTo @ when $.hasClass quotelink, 'deadlink'
      $.rmClass quotelink, 'deadlink'
      QuoteMarkers.parseQuotelink Get.postFromNode(quotelink), quotelink, true
    return

  collect: ->
    @kill()
    g.posts.rm @fullID
    @thread.posts.rm @
    @board.posts.rm @

  addClone: (context, contractThumb) ->
    new Clone @, context, contractThumb

  rmClone: (index) ->
    @clones.splice index, 1
    for clone in @clones[index..]
      clone.nodes.root.dataset.clone = index++
    return
